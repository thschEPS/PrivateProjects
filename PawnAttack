//Get buttons integrated so their is user choice  
var grid = [
  [0,0,0],
  [0,0,0],
  [0,0,0]
];

//Using Can.JS to simplify inheritance and polymorphism. 

var Piece = can.Construct.extend({
}, {
    init: function(x, y) {
        this.x = x;
        this.y = y;
        this.position = grid[x][y];        
    }, 
  move: function() {
    var pieceList = [];
  pieceList.push(grid[this.x][this.y]);
  this.column = this.y + 1;
  pieceList.push(grid[this.column][this.x]);
  grid[this.column][this.x] = pieceList[0]; 
  grid[this.x][this.y] = pieceList[1];
    display();
  }, 
  //Use Underscore JS to make finding the piece much easier
  attack: function() {
   this.direction = confirm("Press a button!");
if (this.direction === true) {
    alert('Left');
} else {
    alert('Right');
}
  }
});

function createPawns() {
  var pieceSetUp = [];
  for (var i = 0; i < 3; i++) {
  var pawn = new Piece(i, i);
  grid[i][i] = 'P' + i;
  pieceSetUp.push(pawn);
  }
  display();
  return pieceSetUp;
}

function display() {
  console.log('_______');
  for (var e = 0; e < 3; e++) { 
  console.log(grid[e]);
  }
}

var pieceSetUp = createPawns();

(pieceSetUp[0].attack());
