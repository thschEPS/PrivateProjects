//Get buttons integrated so their is user choice  
var grid = [
    [' E ', ' E ', ' E ', ' E '],
    [' E ', ' E ', ' E ', ' E '],
    [' E ', ' E ', ' E ', ' E '],
    [' E ', ' E ', ' E ', ' E ']
];

//Using Can.JS to simplify inheritance and polymorphism. 

var Piece = can.Construct.extend({}, {
    init: function(x, y) {
        this.y = y;
        this.x = x;
        this.row = x + 1;
        this.bottomRow = x - 1;
        this.rightColumn = y + 1;
        this.leftColumn = y - 1;
        this.position = grid[x][y];
        this.color = Object.defineProperty(this, 'color', {
        get: function() {
            var hold = this.position,
                holdTwo = this.position.substring(0, 1);
            if (holdTwo === 'W') {
                return 'White';
            } else if (holdTwo === 'B') {
                return 'Black';
            }
        }
    });

    },
    move: function() {
      if (this.color === 'White') {
        var whitePieceList = [];
        if (grid[this.row][this.y] !== " E ") {
            console.log('You cannot move here');
        } else {
            whitePieceList.push(grid[this.x][this.y]);
            whitePieceList.push(grid[this.row][this.y]);
            grid[this.row][this.y] = whitePieceList[0];
            grid[this.x][this.y] = whitePieceList[1];
            display();
            whitePieceList.length = 0;
        }        
      } else {
        var blackPieceList = [];
        if (grid[this.bottomRow][this.y] !== " E ") {
            console.log('You cannot move here');
        } else {
            blackPieceList.push(grid[this.x][this.y]);
            blackPieceList.push(grid[this.bottomRow][this.y]);
            grid[this.bottomRow][this.y] = blackPieceList[0];
            grid[this.x][this.y] = blackPieceList[1];
            display();
            blackPieceList.length = 0;
        }    
      }
        

    },
    //Use Underscore JS to make finding the piece much easier
    attack: function() {
        this.direction = confirm("OK for Left, Cancel for Right");
        //Allows user input, whether they want to go left or right
        if (this.direction === false) {
            if (grid[this.rightColumn][this.row] !== ' E') {
                //Checks to see board spot is empty before attacking
                if (_.indexOf(grid[this.x], this.y) !== 0) {
                    //UnderscoreJS makes sure the pieces is not moving off the board 
                    var rightPieceList = [grid[this.x][this.y], grid[this.row][this.rightColumn]];
                    grid[this.x][this.y] = ' E';
                    grid[this.row][this.rightColumn] = rightPieceList[0];

                    this.y = this.rightColumn;
                    this.x = this.row;
                    rightPieceList.length = 0;


                    display();

                } else {
                    console.log('You have approached the edge of the board');
                }
            } else {
                console.log('No piece here, try moving again');

            }
        } else {
            if (grid[this.row][this.leftColumn] !== ' E') {
                //Checks to see board spot is empty before attacking
                if (_.indexOf(grid[this.x], this.y) !== 0) {
                    //UnderscoreJS makes sure the pieces is not moving off the board 
                    var leftPieceList = [grid[this.x][this.y], grid[this.row][this.leftColumn]];
                    grid[this.x][this.y] = ' E';
                    grid[this.row][this.leftColumn] = leftPieceList[0];

                    this.y = this.leftColumn;
                    this.x = this.row;
                    leftPieceList.length = 0;

                    display();
                } else {
                    console.log('You have approached the edge of the board');
                }
            } else {
                console.log('No piece here, try moving again');


            }
        }
    }
});

function createPawns() {
    var pieceSetUp = [];
    for (var i = 0; i < 4; i++) {
        var whitePawn = new Piece(0, i);
        var whitePawnNum = i + 1;
        grid[0][i] = 'WP' + whitePawnNum;
        pieceSetUp.push(whitePawn);
    }
    for (var e = 3; e > -1; e--) {
        var blackPawn = new Piece(3, e);
        var blackPawnNum = e + 1;
        grid[3][e] = 'BP' + blackPawnNum;
        pieceSetUp.push(blackPawn);
    }
    display();
    return pieceSetUp;
}

function display() {
    console.log('_______');
    for (var e = 0; e < 4; e++) {
        console.log(grid[e]);
    }
}

var pieceSetUp = createPawns();



pieceSetUp[4].move(); //Still Buggy
