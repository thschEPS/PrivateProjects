//Display data stored in local array. 
var grid = [
    [' E ', ' E ', ' E ', ' E '],
    [' E ', ' E ', ' E ', ' E '],
    [' E ', ' E ', ' E ', ' E '],
    [' E ', ' E ', ' E ', ' E ']
];

//Using Can.JS to simplify inheritance and polymorphism. 
//Piece is a "Super class" constructor function 
var Piece = can.Construct.extend({
    init: function(x, y, initialPosition) {
        this.y = y;
        this.x = x;
        this.position = grid[x][y];
        this.initialPosition = initialPosition;
        //Get property looks at boolean to determine whether piece is black or white
        this.color = Object.defineProperty(this, 'color', {
            get: function() {
                if (initialPosition === true) {
                    return 'White';
                } else if (initialPosition === false) {
                    return 'Black';
                }
            }
        });

    },
    //Search Scanner to be used when there are more pieces to see if the piece can move there and if there are piece there. Method is defined in the prototype object. 
    //Search function uses recursion + array methods via underscore_JS. 
    search: function search(num, column) {
        if (!column) {
            // This statement allows you to omit the column parameter.
            // So you can call 'search(9);' and it will assume the column is 0.
            column = 0;
        }
        if (column >= grid.length) {
            console.log('No number present');
            return null;
        }
        if (_.contains(grid[column], num)) {
            var coordinates = [_.indexOf(grid[column], num), column];
            console.log(coordinates);
            return coordinates;
        } else {
            return search(num, column + 1);
        }
    }

});

//Inheritance and encapulation w/sub classes. 
var Queen = Piece.extend({
    init: function() {
        //instance w/this. 
        Piece.prototype.init.apply(this, arguments);
    },
    diagMove: function() {
        var spaceNum = 1, //prompt('How many spaces Forward?');
            verticalDirection = 'Up', //prompt('Up or Down?');
            horizontalDirection = 'Right'; //prompt('Left or Right?');
        if (verticalDirection === 'Up') {
            if (horizontalDirection === 'Left') {
                grid[this.x][this.y] = ' E ';
                this.position = grid[(this.x - 1) + (spaceNum)][(this.y - 1) + (spaceNum)];
                //Searches for substring so it can easily replace the text on the board. 
                grid[(this.x) - (spaceNum)][(this.y) - (spaceNum)] = ' Q ' + this.color.substring(0, 1);
                this.x = (this.x - 1) + (spaceNum);
                this.y = (this.y - 1) + (spaceNum);
                display();
            } else if (horizontalDirection === 'Right') {


                grid[this.x][this.y] = ' E ';
                this.position = grid[(this.x - 1) + (spaceNum)][(this.y + 1) + (spaceNum)];
                grid[(this.x) - (spaceNum)][(this.y) + (spaceNum)] = ' Q ' + this.color.substring(0, 1);
                this.x = (this.x - 1) + (spaceNum);
                this.y = (this.y + 1) + (spaceNum);
                display();



            }

        } else if (verticalDirection === 'Down') {


            if (horizontalDirection === 'Left') {
                grid[this.x][this.y] = ' E ';
                this.position = grid[(this.x) + (spaceNum)][(this.y - 1) + (spaceNum)];
                grid[(this.x) + (spaceNum)][(this.y) - (spaceNum)] = ' Q ' + this.color.substring(0, 1);
                this.x = (this.x + 1) + (spaceNum);
                this.y = (this.y - 1) + (spaceNum);
                display();
            } else if (horizontalDirection === 'Right') {


                grid[this.x][this.y] = ' E ';
                this.position = grid[(this.x) + (spaceNum)][(this.y + 1) + (spaceNum)];
                grid[(this.x) + (spaceNum)][(this.y) + (spaceNum)] = ' Q ' + this.color.substring(0, 1);
                this.x = (this.x + 1) + (spaceNum);
                this.y = (this.y + 1) + (spaceNum);
                display();



            }
        }
    },
    verticalMove: function() {
        var spaceNum = 1; //prompt('How many?');
        var verticalDirection = 'Backwards'; //prompt('Backwards or Forwards?');
        if (verticalDirection === 'Forwards') {
            grid[this.x][this.y] = ' E ';
            this.position = grid[this.x + spaceNum][this.y];
            grid[this.x + spaceNum][this.y] = ' Q ' + this.color.substring(0, 1);
            this.x += spaceNum;
            display();
        } else if (verticalDirection === 'Backwards') {
            var downSpaces = (grid.length) - ((spaceNum) + 1);
            grid[this.x][this.y] = ' E ';
            this.position = grid[downSpaces][this.y];
            grid[downSpaces][this.y] = ' Q ' + this.color.substring(0, 1);
            this.x = downSpaces;
            display();
        }
    },

    horizontalMove: function() {
        var spaceHorizontalNum = 2; //prompt('How many?');
        var horizontalDirection = 'Left'; //prompt('Left or Right?');
        if (horizontalDirection === 'Right') {
            grid[this.x][this.y] = ' E ';
            this.position = grid[this.x][this.y + spaceHorizontalNum];
            grid[this.x][this.y + spaceHorizontalNum] = ' Q ' + this.color.substring(0, 1);
            this.y += spaceHorizontalNum;
            display();
        } else if (horizontalDirection === 'Left') {
            var sideSpaces = (grid.length) - ((spaceHorizontalNum) + 1);
            grid[this.x][this.y] = ' E ';
            this.position = grid[this.x][sideSpaces];
            grid[this.x][sideSpaces - this.y + 1] = ' Q ' + this.color.substring(0, 1);
            this.y += sideSpaces;
            display();
        }
    }
});

var Rook = Piece.extend({
    init: function() {
        Piece.prototype.init.apply(this, arguments);
    },
    verticalMove: function() {
        var spaceNum = 1; //prompt('How many?');
        var verticalDirection = 'Backwards'; //prompt('Backwards or Forwards');
        if (verticalDirection === 'Forwards') {
            grid[this.x][this.y] = ' E ';
            this.position = grid[this.x + spaceNum][this.y];
            grid[this.x + spaceNum][this.y] = ' R ' + this.color.substring(0, 1);
            this.x += spaceNum;
            display();
        } else if (verticalDirection === 'Backwards') {
            var downSpaces = (grid.length) - ((spaceNum) + 1);
            grid[this.x][this.y] = ' E ';
            this.position = grid[downSpaces][this.y];
            grid[downSpaces][this.y] = ' R ' + this.color.substring(0, 1);
            this.x = downSpaces;
            display();
        }
    },

    horizontalMove: function() {
        var spaceHorizontalNum = 2; //prompt('How many?');
        var horizontalDirection = 'Left'; //prompt('Left or Right');
        if (horizontalDirection === 'Right') {
            grid[this.x][this.y] = ' E ';
            this.position = grid[this.x][this.y + spaceHorizontalNum];
            grid[this.x][this.y + spaceHorizontalNum] = ' R ' + this.color.substring(0, 1);
            this.y += spaceHorizontalNum;
            display();
        } else if (horizontalDirection === 'Left') {
            var sideSpaces = (grid.length) - ((spaceHorizontalNum) + 1);
            grid[this.x][this.y] = ' E ';
            this.position = grid[this.x][sideSpaces];
            grid[this.x][sideSpaces - this.y + 1] = ' R ' + this.color.substring(0, 1);
            this.y += sideSpaces;
            display();
        }
    }
});

var Bishop = Piece.extend({
    init: function() {
        Piece.prototype.init.apply(this, arguments);
    },
    move: function() {
        var spaceNum = 1, //prompt('How many?');
            verticalDirection = 'Down', //prompt('Up or Down?');
            horizontalDirection = 'Left'; //prompt(Left or Right?);
        //Nested conditionals allow for separate types of movement on a 2 dimensional grid. 
        if (verticalDirection === 'Up') {
            if (horizontalDirection === 'Left') {
                grid[this.x][this.y] = ' E ';
                this.position = grid[(this.x - 1) + (spaceNum)][(this.y - 1) + (spaceNum)];
                grid[(this.x) - (spaceNum)][(this.y) - (spaceNum)] = ' B' + this.color.substring(0, 1);
                this.x = (this.x - 1) + (spaceNum);
                this.y = (this.y - 1) + (spaceNum);
                display();
            } else if (horizontalDirection === 'Right') {


                grid[this.x][this.y] = ' E ';
                this.position = grid[(this.x - 1) + (spaceNum)][(this.y + 1) + (spaceNum)];
                grid[(this.x) - (spaceNum)][(this.y) + (spaceNum)] = ' B' + this.color.substring(0, 1);
                this.x = (this.x - 1) + (spaceNum);
                this.y = (this.y + 1) + (spaceNum);
                display();



            }

        } else if (verticalDirection === 'Down') {


            if (horizontalDirection === 'Left') {
                grid[this.x][this.y] = ' E ';
                this.position = grid[(this.x) + (spaceNum)][(this.y - 1) + (spaceNum)];
                grid[(this.x) + (spaceNum)][(this.y) - (spaceNum)] = ' B' + this.color.substring(0, 1);
                this.x = (this.x + 1) + (spaceNum);
                this.y = (this.y - 1) + (spaceNum);
                display();
            } else if (horizontalDirection === 'Right') {


                grid[this.x][this.y] = ' E ';
                this.position = grid[(this.x) + (spaceNum)][(this.y + 1) + (spaceNum)];
                grid[(this.x) + (spaceNum)][(this.y) + (spaceNum)] = ' B' + this.color.substring(0, 1);
                this.x = (this.x + 1) + (spaceNum);
                this.y = (this.y + 1) + (spaceNum);
                display();



            }
        }
    }
});


var Pawn = Piece.extend({
    init: function(x, y, initialPosition, color, position) {
        // call Piece's inititaliation code.
        // All information integral to the Pawn is stored below. 

        Piece.prototype.init.apply(this, arguments);
        this.rightColumn = y + 1;
        this.leftColumn = y - 1;
        this.row = Object.defineProperty(this, 'row', {
            get: function() {
                if (this.color === 'White') {
                    return x + 1;
                } else if (this.color === 'Black') {
                    return x - 1;
                }
            }
        });
    },
    move: function() {
        //Decides the direction the pawn can move based on color
        var pieceList = [];
        if (grid[this.row][this.y] !== " E ") {
            console.log('You cannot move here');
        } else {
            pieceList.push(grid[this.x][this.y]);
            pieceList.push(grid[this.row][this.y]);
            grid[this.row][this.y] = pieceList[0];
            grid[this.x][this.y] = pieceList[1];
            display();
            pieceList.length = 0;
        }
    },

    //Use Underscore JS to make finding the piece much easier
    attack: function() {
        this.direction = false; //confirm("OK for Left, Cancel for Right");
        //Allows user input, whether they want to go left or right
        if (this.direction === false) {
            if (grid[this.row][this.rightColumn] !== ' E ') {
                if (_.indexOf(grid[this.x], this.y) !== 0) {
                    //UnderscoreJS makes sure the pieces is not moving off the board 
                    var rightPieceList = [grid[this.x][this.y], grid[this.row][this.rightColumn]];
                    grid[this.x][this.y] = ' E ';
                    grid[this.row][this.rightColumn] = rightPieceList[0];
                    this.y = this.rightColumn;
                    this.x = this.row;
                    rightPieceList.length = 0;
                    //CUts piece out of game so it cannot move. 
                    for (var e = 0; e < pieceSetUp.length; e++) {
                        if (pieceSetUp[e].position === rightPieceList[0]) {
                            var index = _.indexOf(pieceSetUp, pieceSetUp[e]);
                            if (index > -1) {
                                pieceSetUp.splice(index, 1);

                            }
                        }
                    }
                    display();

                }
            } else {
                console.log('No piece here, try moving again');

            }
        } else {
            if (grid[this.row][this.leftColumn] !== ' E ') {
                console.log('No piece to move here');
            } else {
                if (this.y === 3) {
                    console.log('You have approached the edge of the board');
                }
                if (_.indexOf(grid[this.x], this.y) !== 3) {
                    //UnderscoreJS makes sure the pieces is not moving off the board 
                    var leftPieceList = [grid[this.x][this.y], grid[this.row][this.leftColumn]];
                    grid[this.x][this.y] = ' E ';
                    for (var i = 0; i < pieceSetUp.length; i++) {
                        if (pieceSetUp[i].position === leftPieceList[0]) {
                            var leftIndex = _.indexOf(pieceSetUp, pieceSetUp[i]);
                            if (leftIndex > -1) {
                                pieceSetUp.splice(leftIndex, 1);

                            }
                        }
                    }
                    grid[this.row][this.leftColumn] = leftPieceList[0];
                    this.y = this.leftColumn;
                    this.x = this.row;
                    leftPieceList.length = 0;

                    display();
                } else {
                    console.log('You have approached the edge of the board');
                }

            }
        }
    }
});



function createPawns() { //pawn constructor function
    var pieceSetUp = [];
    //Separate For Loops creates pawns at opposite sides of the board
    //Boolean passed in to determine color
    for (var i = 0; i < 4; i++) {
        var whitePieceType = [new Pawn(0, i, true), new Queen(0, i, true), new Rook(0, i, true), new Bishop(0, i, true)],
            pieceNames = ['WP ', 'WQ ', 'WR ', 'WB '];
        var whitePawn = whitePieceType[i];
        grid[0][i] = pieceNames[i];
        pieceSetUp.push(whitePawn);
    }
    for (var e = 3; e > -1; e--) {
        var blackPieceType = [new Pawn(3, e, false), new Queen(3, e, false), new Rook(3, e, false), new Bishop(3, e, false)],
            blackPieceNames = ['BP ', 'BQ ', 'BR ', 'BB '];
        var blackPawn = blackPieceType[e];
        grid[3][e] = blackPieceNames[e];
        pieceSetUp.push(blackPawn);
    }
    display();
    return pieceSetUp;
}

//Display each row of the board with a for loop
function display() {
    console.log('_______');
    for (var e = 0; e < 4; e++) {
        console.log(grid[e]);
    }
}

var pieceSetUp = createPawns(); //creates a new chess setting


pieceSetUp[3].move();
