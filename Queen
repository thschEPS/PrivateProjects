var Queen = Piece.extend({
  init: function() {
    Piece.prototype.init.apply(this, arguments);
    }, 
  diagMove: function() {
    var spaceNum = 1, //prompt();
        verticalDirection = 'Down', //prompt();
        horizontalDirection = 'Right'; //prompt();
    if (verticalDirection === 'Up') {
      if (horizontalDirection === 'Left') {
        grid[this.x][this.y] = ' E ';
        this.position = grid[(this.x - 1) + (spaceNum)][(this.y - 1) +             (spaceNum)];
        grid[(this.x) - (spaceNum)][(this.y) - (spaceNum)] = ' B '; 
        this.x = (this.x - 1) + (spaceNum);
        this.y = (this.y - 1) + (spaceNum);
        display();
      } else if (horizontalDirection === 'Right') {
         
        
        grid[this.x][this.y] = ' E ';
        this.position = grid[(this.x - 1) + (spaceNum)][(this.y + 1) +             (spaceNum)];
        grid[(this.x) - (spaceNum)][(this.y) + (spaceNum)] = ' B '; 
        this.x = (this.x - 1) + (spaceNum);
        this.y = (this.y + 1) + (spaceNum);
        display();
        
        
        
      }
      
      } else if (verticalDirection === 'Down') {
               
        
        if (horizontalDirection === 'Left') {
        grid[this.x][this.y] = ' E ';
        this.position = grid[(this.x) + (spaceNum)][(this.y - 1) +             (spaceNum)];
        grid[(this.x) + (spaceNum)][(this.y) - (spaceNum)] = ' B '; 
        this.x = (this.x + 1) + (spaceNum);
        this.y = (this.y - 1) + (spaceNum);
        display();
      } else if (horizontalDirection === 'Right') {
         
        
        grid[this.x][this.y] = ' E ';
        this.position = grid[(this.x) + (spaceNum)][(this.y + 1) +             (spaceNum)];
        grid[(this.x) + (spaceNum)][(this.y) + (spaceNum)] = ' B '; 
        this.x = (this.x + 1) + (spaceNum);
        this.y = (this.y + 1) + (spaceNum);
        display();
        
        
        
      }
    }
  }, 
  verticalMove: function () {
    var spaceNum = 1; //prompt('How many?');
    var verticalDirection = 'Backwards';//prompt();
    if (verticalDirection === 'Forwards') {
      grid[this.x][this.y] = ' E '; 
      this.position = grid[this.x + spaceNum][this.y];
      grid[this.x + spaceNum][this.y] = ' R ';
      this.x += spaceNum;
      display();
    } else if (verticalDirection === 'Backwards') {
      var downSpaces = (grid.length) - ((spaceNum) + 1);
      grid[this.x][this.y] = ' E '; 
      this.position = grid[downSpaces][this.y];
      grid[downSpaces][this.y] = ' R ';
      this.x = downSpaces;
      display();
    }
  }, 
  
  horizontalMove: function () {
    var spaceHorizontalNum = 2; //prompt('How many?');
    var horizontalDirection = 'Left'; //prompt();
    if (horizontalDirection === 'Right') {
      grid[this.x][this.y] = ' E '; 
      this.position = grid[this.x][this.y + spaceHorizontalNum];
      grid[this.x][this.y + spaceHorizontalNum] = ' R ';
      this.y += spaceHorizontalNum;
      display();
    } else if (horizontalDirection === 'Left') {
      var sideSpaces = (grid.length) - ((spaceHorizontalNum) + 1);
      grid[this.x][this.y] = ' E '; 
      this.position = grid[this.x][sideSpaces];
      grid[this.x][sideSpaces -this.y + 1] = ' R ';
      this.y += sideSpaces;
      display();
    }
  }  
});
